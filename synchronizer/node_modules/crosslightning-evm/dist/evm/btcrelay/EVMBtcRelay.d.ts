/// <reference types="node" />
import { BitcoinRpc, BtcBlock, BtcRelay } from "crosslightning-base";
import { Contract, Signer, UnsignedTransaction } from "ethers";
import { Interface } from "ethers/lib/utils";
import { EVMBtcStoredHeader } from "./headers/EVMBtcStoredHeader";
import { EVMBtcHeader } from "./headers/EVMBtcHeader";
export declare class EVMBtcRelay<B extends BtcBlock> implements BtcRelay<EVMBtcStoredHeader, UnsignedTransaction, B> {
    provider: Signer;
    contract: Contract;
    contractInterface: Interface;
    bitcoinRpc: BitcoinRpc<B>;
    readonly maxHeadersPerTx: number;
    readonly maxForkHeadersPerTx: number;
    constructor(provider: Signer, bitcoinRpc: BitcoinRpc<B>, btcRelayContractAddress: string);
    retrieveLogAndBlockheight(blockData: {
        blockhash: string;
        height: number;
    }, requiredBlockheight?: number): Promise<{
        header: EVMBtcStoredHeader;
        height: number;
    }>;
    retrieveLogByCommitHash(spvCommitmentHashStr: string, blockData: {
        blockhash: string;
        height: number;
    }): Promise<EVMBtcStoredHeader>;
    retrieveLatestKnownBlockLog(): Promise<{
        resultStoredHeader: EVMBtcStoredHeader;
        resultBitcoinHeader: B;
    }>;
    static serializeBlockHeader(e: BtcBlock): EVMBtcHeader;
    saveMainHeaders(mainHeaders: BtcBlock[], storedHeader: EVMBtcStoredHeader): Promise<{
        forkId: number;
        lastStoredHeader: EVMBtcStoredHeader;
        tx: import("ethers").PopulatedTransaction;
        computedCommitedHeaders: EVMBtcStoredHeader[];
    }>;
    saveNewForkHeaders(forkHeaders: BtcBlock[], storedHeader: EVMBtcStoredHeader, tipWork: Buffer): Promise<{
        forkId: number;
        lastStoredHeader: EVMBtcStoredHeader;
        tx: import("ethers").PopulatedTransaction;
        computedCommitedHeaders: EVMBtcStoredHeader[];
    }>;
    saveForkHeaders(forkHeaders: BtcBlock[], storedHeader: EVMBtcStoredHeader, forkId: number, tipWork: Buffer): Promise<{
        forkId: number;
        lastStoredHeader: EVMBtcStoredHeader;
        tx: UnsignedTransaction;
        computedCommitedHeaders: EVMBtcStoredHeader[];
    }>;
    getTipData(): Promise<{
        commitHash: string;
        chainWork: Buffer;
        blockheight: number;
    }>;
}
