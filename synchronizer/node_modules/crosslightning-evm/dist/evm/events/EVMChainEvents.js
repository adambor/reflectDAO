"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVMChainEvents = void 0;
const EVMSwapData_1 = require("../swaps/EVMSwapData");
const fs = require("fs/promises");
const crosslightning_base_1 = require("crosslightning-base");
const BLOCKHEIGHT_FILENAME = "/blockheight.txt";
const LOG_FETCH_INTERVAL = 5 * 1000;
const LOG_FETCH_LIMIT = 2500;
class EVMChainEvents {
    constructor(directory, provider, evmSwapProgram) {
        this.listeners = [];
        this.directory = directory;
        this.provider = provider;
        this.evmSwapProgram = evmSwapProgram;
    }
    getLastHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const txt = yield fs.readFile(this.directory + BLOCKHEIGHT_FILENAME);
                return parseInt(txt.toString());
            }
            catch (e) {
                return null;
            }
        });
    }
    saveLastBlockheight(lastBlockheight) {
        return fs.writeFile(this.directory + BLOCKHEIGHT_FILENAME, lastBlockheight.toString());
    }
    processEvent(log) {
        return __awaiter(this, void 0, void 0, function* () {
            let parsedEvents = [];
            const event = this.evmSwapProgram.contractInterface.parseLog(log);
            console.log("EVM parsed event: ", event);
            if (event == null)
                return;
            if (event.name === "Claim") {
                parsedEvents.push(new crosslightning_base_1.ClaimEvent(event.args.paymentHash.substring(2), event.args.secret.substring(2)));
            }
            if (event.name === "Refund") {
                parsedEvents.push(new crosslightning_base_1.RefundEvent(event.args.paymentHash.substring(2)));
            }
            if (event.name === "Initialize") {
                const struct = {
                    offerer: event.args.data.offerer,
                    claimer: event.args.data.claimer,
                    token: event.args.data.token,
                    amount: event.args.data.amount,
                    paymentHash: event.args.data.paymentHash,
                    data: event.args.data.data,
                    txoHash: event.args.txoHash
                };
                parsedEvents.push(new crosslightning_base_1.InitializeEvent(event.args.paymentHash.substring(2), event.args.txoHash.substring(2), 0, new EVMSwapData_1.EVMSwapData(struct)));
            }
            for (let listener of this.listeners) {
                yield listener(parsedEvents);
            }
        });
    }
    checkEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            let lastBlock = yield this.getLastHeight();
            const block = yield this.provider.getBlock("latest");
            let latestBlock = block.number;
            if (lastBlock == null) {
                if (latestBlock != null) {
                    yield this.saveLastBlockheight(latestBlock);
                }
                return;
            }
            do {
                let toBlock;
                if (latestBlock - lastBlock > LOG_FETCH_LIMIT) {
                    toBlock = lastBlock + LOG_FETCH_LIMIT;
                }
                else {
                    toBlock = latestBlock;
                }
                const logs = yield this.provider.getLogs({
                    fromBlock: lastBlock + 1,
                    toBlock,
                    address: this.evmSwapProgram.contract.address
                });
                console.log("Returned past logs: ", logs);
                //Check the logs
                for (let log of logs) {
                    yield this.processEvent(log);
                }
                lastBlock = toBlock;
                if (lastBlock !== latestBlock) {
                    yield new Promise(resolve => setTimeout(resolve, 500));
                }
            } while (lastBlock !== latestBlock);
            yield this.saveLastBlockheight(lastBlock);
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs.mkdir(this.directory);
            }
            catch (e) { }
            let func;
            func = () => __awaiter(this, void 0, void 0, function* () {
                yield this.checkEvents().catch(e => {
                    console.error("Failed to fetch Sol log");
                    console.error(e);
                });
                setTimeout(func, LOG_FETCH_INTERVAL);
            });
            yield func();
        });
    }
    registerListener(cbk) {
        this.listeners.push(cbk);
    }
    unregisterListener(cbk) {
        const index = this.listeners.indexOf(cbk);
        if (index >= 0) {
            this.listeners.splice(index, 1);
            return true;
        }
        return false;
    }
}
exports.EVMChainEvents = EVMChainEvents;
