"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVMChainEventsBrowser = void 0;
const crosslightning_base_1 = require("crosslightning-base");
const EVMSwapData_1 = require("../swaps/EVMSwapData");
class EVMChainEventsBrowser {
    constructor(provider, evmSwapContract) {
        this.listeners = [];
        this.provider = provider;
        this.evmSwapContract = evmSwapContract;
    }
    init() {
        this.eventListener = (log) => __awaiter(this, void 0, void 0, function* () {
            const event = this.evmSwapContract.contractInterface.parseLog(log);
            let parsedEvent;
            if (event.name === "Initialize") {
                const data = {
                    offerer: event.args.data.offerer,
                    claimer: event.args.data.claimer,
                    token: event.args.data.token,
                    amount: event.args.data.amount,
                    paymentHash: event.args.data.paymentHash,
                    data: event.args.data.data,
                    txoHash: event.args.txoHash
                };
                const swapData = new EVMSwapData_1.EVMSwapData(data);
                parsedEvent = new crosslightning_base_1.InitializeEvent(swapData.getHash(), swapData.getTxoHash(), swapData.getIndex(), swapData);
            }
            if (event.name === "Claim") {
                parsedEvent = new crosslightning_base_1.ClaimEvent(event.args.paymentHash.substring(2), event.args.secret.substring(2));
            }
            if (event.name === "Refund") {
                parsedEvent = new crosslightning_base_1.RefundEvent(event.args.paymentHash.substring(2));
            }
            for (let listener of this.listeners) {
                yield listener([parsedEvent]);
            }
        });
        this.eventType = {
            address: this.evmSwapContract.contract.address
        };
        this.provider.on(this.eventType, this.eventListener);
        return Promise.resolve();
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.provider.off(this.eventType, this.eventListener);
        });
    }
    registerListener(cbk) {
        this.listeners.push(cbk);
    }
    unregisterListener(cbk) {
        const index = this.listeners.indexOf(cbk);
        if (index >= 0) {
            this.listeners.splice(index, 1);
            return true;
        }
        return false;
    }
}
exports.EVMChainEventsBrowser = EVMChainEventsBrowser;
